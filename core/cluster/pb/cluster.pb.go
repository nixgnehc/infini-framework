// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package cluster

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MetadataRequest struct {
	Op                   string   `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetadataRequest) Reset()         { *m = MetadataRequest{} }
func (m *MetadataRequest) String() string { return proto.CompactTextString(m) }
func (*MetadataRequest) ProtoMessage()    {}
func (*MetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{0}
}

func (m *MetadataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetadataRequest.Unmarshal(m, b)
}
func (m *MetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetadataRequest.Marshal(b, m, deterministic)
}
func (m *MetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRequest.Merge(m, src)
}
func (m *MetadataRequest) XXX_Size() int {
	return xxx_messageInfo_MetadataRequest.Size(m)
}
func (m *MetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRequest proto.InternalMessageInfo

func (m *MetadataRequest) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *MetadataRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MetadataRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MetadataResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetadataResponse) Reset()         { *m = MetadataResponse{} }
func (m *MetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MetadataResponse) ProtoMessage()    {}
func (*MetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{1}
}

func (m *MetadataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetadataResponse.Unmarshal(m, b)
}
func (m *MetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetadataResponse.Marshal(b, m, deterministic)
}
func (m *MetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataResponse.Merge(m, src)
}
func (m *MetadataResponse) XXX_Size() int {
	return xxx_messageInfo_MetadataResponse.Size(m)
}
func (m *MetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataResponse proto.InternalMessageInfo

func (m *MetadataResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type NodeRequest struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	NodeIp               string   `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	NodePort             uint32   `protobuf:"varint,3,opt,name=node_port,json=nodePort,proto3" json:"node_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeRequest) Reset()         { *m = NodeRequest{} }
func (m *NodeRequest) String() string { return proto.CompactTextString(m) }
func (*NodeRequest) ProtoMessage()    {}
func (*NodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{2}
}

func (m *NodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRequest.Unmarshal(m, b)
}
func (m *NodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRequest.Marshal(b, m, deterministic)
}
func (m *NodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRequest.Merge(m, src)
}
func (m *NodeRequest) XXX_Size() int {
	return xxx_messageInfo_NodeRequest.Size(m)
}
func (m *NodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRequest proto.InternalMessageInfo

func (m *NodeRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeRequest) GetNodeIp() string {
	if m != nil {
		return m.NodeIp
	}
	return ""
}

func (m *NodeRequest) GetNodePort() uint32 {
	if m != nil {
		return m.NodePort
	}
	return 0
}

type AckResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckResponse) Reset()         { *m = AckResponse{} }
func (m *AckResponse) String() string { return proto.CompactTextString(m) }
func (*AckResponse) ProtoMessage()    {}
func (*AckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{3}
}

func (m *AckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckResponse.Unmarshal(m, b)
}
func (m *AckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckResponse.Marshal(b, m, deterministic)
}
func (m *AckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckResponse.Merge(m, src)
}
func (m *AckResponse) XXX_Size() int {
	return xxx_messageInfo_AckResponse.Size(m)
}
func (m *AckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckResponse proto.InternalMessageInfo

func (m *AckResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type HealthCheckRequest struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	NodeIp               string   `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	NodePort             uint32   `protobuf:"varint,3,opt,name=node_port,json=nodePort,proto3" json:"node_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{4}
}

func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

func (m *HealthCheckRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *HealthCheckRequest) GetNodeIp() string {
	if m != nil {
		return m.NodeIp
	}
	return ""
}

func (m *HealthCheckRequest) GetNodePort() uint32 {
	if m != nil {
		return m.NodePort
	}
	return 0
}

type HealthCheckResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{5}
}

func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*MetadataRequest)(nil), "cluster.MetadataRequest")
	proto.RegisterType((*MetadataResponse)(nil), "cluster.MetadataResponse")
	proto.RegisterType((*NodeRequest)(nil), "cluster.NodeRequest")
	proto.RegisterType((*AckResponse)(nil), "cluster.AckResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "cluster.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "cluster.HealthCheckResponse")
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor_3cfb3b8ec240c376) }

var fileDescriptor_3cfb3b8ec240c376 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x4d, 0x4f, 0xea, 0x40,
	0x14, 0xa5, 0x7c, 0x15, 0x2e, 0xe1, 0x3d, 0x32, 0x8f, 0xe4, 0x55, 0x70, 0xa1, 0xdd, 0xe8, 0xc2,
	0xd4, 0x04, 0x75, 0xe5, 0x46, 0x41, 0x13, 0x31, 0x48, 0x1a, 0xfe, 0x80, 0x0e, 0xe5, 0x02, 0x0d,
	0xb4, 0x33, 0xce, 0x4c, 0x51, 0x7e, 0x9c, 0xff, 0xcd, 0xb4, 0x65, 0x00, 0x95, 0xc4, 0xb8, 0x70,
	0x37, 0xe7, 0x9e, 0x9e, 0x73, 0x4f, 0xef, 0xbd, 0x50, 0xf5, 0xe6, 0x91, 0x54, 0x28, 0x1c, 0x2e,
	0x98, 0x62, 0xc4, 0x5c, 0x41, 0xbb, 0x0b, 0x7f, 0x1f, 0x50, 0xd1, 0x11, 0x55, 0x74, 0x80, 0xcf,
	0x11, 0x4a, 0x45, 0xfe, 0x40, 0x96, 0x71, 0xcb, 0x38, 0x30, 0x8e, 0xcb, 0x83, 0x2c, 0xe3, 0xa4,
	0x06, 0xb9, 0x19, 0x2e, 0xad, 0x6c, 0x52, 0x88, 0x9f, 0xa4, 0x0e, 0x85, 0x05, 0x9d, 0x47, 0x68,
	0xe5, 0x92, 0x5a, 0x0a, 0xec, 0x13, 0xa8, 0x6d, 0xac, 0x24, 0x67, 0xa1, 0x44, 0x62, 0x81, 0x19,
	0xa0, 0x94, 0x74, 0x82, 0x2b, 0x43, 0x0d, 0xed, 0x27, 0xa8, 0xf4, 0xd9, 0x08, 0x75, 0xd3, 0x26,
	0x94, 0x43, 0x36, 0xc2, 0xc7, 0x90, 0x06, 0xfa, 0xd3, 0x52, 0x5c, 0xe8, 0xd3, 0x00, 0xc9, 0x7f,
	0x30, 0x13, 0xd2, 0xe7, 0xab, 0x14, 0xc5, 0x18, 0x76, 0xf9, 0x5a, 0xc5, 0x99, 0x50, 0x49, 0x98,
	0x6a, 0xaa, 0x72, 0x99, 0x50, 0xf6, 0x11, 0x54, 0xae, 0xbd, 0xd9, 0x76, 0x14, 0x19, 0x79, 0x1e,
	0x4a, 0x99, 0xf8, 0x97, 0x06, 0x1a, 0xda, 0x13, 0x20, 0x77, 0x48, 0xe7, 0x6a, 0xda, 0x99, 0x62,
	0x2c, 0xf8, 0xb5, 0x44, 0xa7, 0xf0, 0xef, 0x43, 0xa3, 0xef, 0x92, 0xb5, 0x7a, 0x50, 0xd2, 0x23,
	0x25, 0x57, 0x60, 0xde, 0xbe, 0xa2, 0x17, 0x29, 0x24, 0x96, 0xa3, 0xb7, 0xf9, 0x69, 0x77, 0x8d,
	0xbd, 0x1d, 0x4c, 0xda, 0xc5, 0xce, 0xb4, 0xde, 0x0c, 0x28, 0xdf, 0xf8, 0xd2, 0x63, 0x0b, 0x14,
	0x4b, 0x72, 0x0e, 0xf9, 0x7b, 0xe6, 0x87, 0xa4, 0xbe, 0x96, 0x6c, 0xed, 0xa3, 0xb1, 0xa9, 0x6e,
	0xcd, 0xd0, 0xce, 0x90, 0x0b, 0x28, 0xf4, 0x90, 0x2e, 0xf0, 0x87, 0xb2, 0x0e, 0xe4, 0x5d, 0x3f,
	0x9c, 0x90, 0xe6, 0x9a, 0xff, 0x3a, 0xf1, 0xc6, 0xfe, 0x6e, 0x52, 0x9b, 0xb4, 0x2f, 0xe1, 0xd0,
	0x63, 0x81, 0xe3, 0x87, 0x63, 0x3f, 0xf4, 0xd5, 0x70, 0xa9, 0xd0, 0x19, 0x0b, 0x1a, 0xe0, 0x0b,
	0x13, 0x33, 0x2d, 0x6d, 0xd7, 0x3b, 0xe9, 0x43, 0xff, 0xbf, 0x1b, 0xdf, 0xbb, 0x6b, 0x0c, 0x8b,
	0xc9, 0xe1, 0x9f, 0xbd, 0x07, 0x00, 0x00, 0xff, 0xff, 0x48, 0x3b, 0x7b, 0xa6, 0x09, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataClient interface {
	Execute(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
}

type metadataClient struct {
	cc *grpc.ClientConn
}

func NewMetadataClient(cc *grpc.ClientConn) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) Execute(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, "/cluster.Metadata/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServer is the server API for Metadata service.
type MetadataServer interface {
	Execute(context.Context, *MetadataRequest) (*MetadataResponse, error)
}

func RegisterMetadataServer(s *grpc.Server, srv MetadataServer) {
	s.RegisterService(&_Metadata_serviceDesc, srv)
}

func _Metadata_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Metadata/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).Execute(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Metadata_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryClient interface {
	Join(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*AckResponse, error)
	Leave(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*AckResponse, error)
	Ping(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type discoveryClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryClient(cc *grpc.ClientConn) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Join(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/cluster.Discovery/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Leave(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/cluster.Discovery/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Ping(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/cluster.Discovery/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
type DiscoveryServer interface {
	Join(context.Context, *NodeRequest) (*AckResponse, error)
	Leave(context.Context, *NodeRequest) (*AckResponse, error)
	Ping(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterDiscoveryServer(s *grpc.Server, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Discovery/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Join(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Discovery/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Leave(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Discovery/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Ping(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Discovery_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Discovery_Leave_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Discovery_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
